
Master_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002866  000028fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800088  00800088  00002922  2**0
                  ALLOC
  3 .stab         00002610  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001414  00000000  00000000  00004f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000065f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000912c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_1>
       8:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_2>
       c:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 10 	call	0x219e	; 0x219e <main>
      8a:	0c 94 31 14 	jmp	0x2862	; 0x2862 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 14 	jmp	0x282c	; 0x282c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 14 	jmp	0x280c	; 0x280c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
}
#endif
/*****************************************************************************************/

void ADC_voidInit()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX_REG->ADLAR = TYPE_DATA ;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 83       	st	Z, r24

	ADMUX_REG->REFS  = REF_VOLT  ;
     b58:	e7 e2       	ldi	r30, 0x27	; 39
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8f 73       	andi	r24, 0x3F	; 63
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	80 83       	st	Z, r24

	ADCSRA_REG->ADPS = PRSCALLER ;
     b64:	e6 e2       	ldi	r30, 0x26	; 38
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 7f       	andi	r24, 0xF8	; 248
     b6c:	86 60       	ori	r24, 0x06	; 6
     b6e:	80 83       	st	Z, r24

	ADCSRA_REG->ADEN = EN        ;
     b70:	e6 e2       	ldi	r30, 0x26	; 38
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	80 83       	st	Z, r24
#ifdef TRIGGER_ENABEL
	ADCSRA_REG->ADATE =EN ;
	SFIOR_REG->SFIOR_ADTS = TRIGGER_SOURCE;
#endif

}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <ADC_voidChannelSellect>:

/*****************************************************************************************/

/* Sellect one ADC Channel to work */
ACD_ERROR_RETURN ADC_voidChannelSellect(ACD_CHANNEL_NUM copy_u8ChannelSellect )
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <ADC_voidChannelSellect+0x6>
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	89 83       	std	Y+1, r24	; 0x01
	if( ( copy_u8ChannelSellect<=7 )   )
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	88 30       	cpi	r24, 0x08	; 8
     b94:	58 f4       	brcc	.+22     	; 0xbac <ADC_voidChannelSellect+0x2c>
	{


		ADMUX_REG->MUX = copy_u8ChannelSellect ;
     b96:	e7 e2       	ldi	r30, 0x27	; 39
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	8f 71       	andi	r24, 0x1F	; 31
     b9e:	98 2f       	mov	r25, r24
     ba0:	9f 71       	andi	r25, 0x1F	; 31
     ba2:	80 81       	ld	r24, Z
     ba4:	80 7e       	andi	r24, 0xE0	; 224
     ba6:	89 2b       	or	r24, r25
     ba8:	80 83       	st	Z, r24
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <ADC_voidChannelSellect+0x30>
	}
	else
	{
		local_error =NUM_OUT_OF_RANGE ;
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_error ;
     bb0:	89 81       	ldd	r24, Y+1	; 0x01

}
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <ADC_StartConversionBoling>:

/*****************************************************************************************/

/* Start Conversion on ADC Channel  Sellected */
ACD_ERROR_RETURN ADC_StartConversionBoling(u16 *copy_Pu8Data)
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	27 97       	sbiw	r28, 0x07	; 7
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	9f 83       	std	Y+7, r25	; 0x07
     bd2:	8e 83       	std	Y+6, r24	; 0x06
	u32 counter =0 ;
     bd4:	1a 82       	std	Y+2, r1	; 0x02
     bd6:	1b 82       	std	Y+3, r1	; 0x03
     bd8:	1c 82       	std	Y+4, r1	; 0x04
     bda:	1d 82       	std	Y+5, r1	; 0x05
	ACD_ERROR_RETURN local_error =OK ;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Pu8Data != NULL)
     be0:	8e 81       	ldd	r24, Y+6	; 0x06
     be2:	9f 81       	ldd	r25, Y+7	; 0x07
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	d1 f1       	breq	.+116    	; 0xc5c <ADC_StartConversionBoling+0xa0>
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC = 1 ;
     be8:	e6 e2       	ldi	r30, 0x26	; 38
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 64       	ori	r24, 0x40	; 64
     bf0:	80 83       	st	Z, r24
     bf2:	0b c0       	rjmp	.+22     	; 0xc0a <ADC_StartConversionBoling+0x4e>
		// wait for flag
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
		{
			counter ++ ;
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	ac 81       	ldd	r26, Y+4	; 0x04
     bfa:	bd 81       	ldd	r27, Y+5	; 0x05
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	a1 1d       	adc	r26, r1
     c00:	b1 1d       	adc	r27, r1
     c02:	8a 83       	std	Y+2, r24	; 0x02
     c04:	9b 83       	std	Y+3, r25	; 0x03
     c06:	ac 83       	std	Y+4, r26	; 0x04
     c08:	bd 83       	std	Y+5, r27	; 0x05
	if(copy_Pu8Data != NULL)
	{
		// Start Conversion --- bit H
		ADCSRA_REG->ADSC = 1 ;
		// wait for flag
		while ( (ADCSRA_REG->ADIF ==0) &&counter<=TIME_OUT )
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	80 71       	andi	r24, 0x10	; 16
     c12:	88 23       	and	r24, r24
     c14:	61 f4       	brne	.+24     	; 0xc2e <ADC_StartConversionBoling+0x72>
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	9b 81       	ldd	r25, Y+3	; 0x03
     c1a:	ac 81       	ldd	r26, Y+4	; 0x04
     c1c:	bd 81       	ldd	r27, Y+5	; 0x05
     c1e:	81 3a       	cpi	r24, 0xA1	; 161
     c20:	26 e8       	ldi	r18, 0x86	; 134
     c22:	92 07       	cpc	r25, r18
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	a2 07       	cpc	r26, r18
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	b2 07       	cpc	r27, r18
     c2c:	18 f3       	brcs	.-58     	; 0xbf4 <ADC_StartConversionBoling+0x38>
		{
			counter ++ ;
		}
		if((ADCSRA_REG->ADIF) ==1 )
     c2e:	e6 e2       	ldi	r30, 0x26	; 38
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 71       	andi	r24, 0x10	; 16
     c36:	88 23       	and	r24, r24
     c38:	71 f0       	breq	.+28     	; 0xc56 <ADC_StartConversionBoling+0x9a>
		{
			// Clear flag
			ADCSRA_REG->ADIF = 1 ;
     c3a:	e6 e2       	ldi	r30, 0x26	; 38
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	80 61       	ori	r24, 0x10	; 16
     c42:	80 83       	st	Z, r24

        #if TYPE_DATA ==RIGHT_DATA
			//store data from REG ( ADC_DATA )  to copy_Pu8Data
			(*copy_Pu8Data) = ADC_DATA     ;
     c44:	e4 e2       	ldi	r30, 0x24	; 36
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	ee 81       	ldd	r30, Y+6	; 0x06
     c4e:	ff 81       	ldd	r31, Y+7	; 0x07
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	80 83       	st	Z, r24
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <ADC_StartConversionBoling+0xa2>
       #endif
		}

		else
		{
			local_error=TIME_OUT_ERROR ;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <ADC_StartConversionBoling+0xa2>

	}

	else
	{
		local_error=NULL_ERROR ;
     c5c:	19 82       	std	Y+1, r1	; 0x01
	}
	return  local_error ;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c60:	27 96       	adiw	r28, 0x07	; 7
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <ADC_StartConversion>:
/*****************************************************************************************/
void ADC_StartConversion(void)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	// Start Conversion --- bit H
	ADCSRA_REG->ADSC = 1 ;
     c7a:	e6 e2       	ldi	r30, 0x26	; 38
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	80 64       	ori	r24, 0x40	; 64
     c82:	80 83       	st	Z, r24
}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	08 95       	ret

00000c8a <ADC_voidChannelMulBoling>:



/* Read all   ADC Channel and store it in array */
ACD_ERROR_RETURN ADC_voidChannelMulBoling(u16 *copy_Pu8Data)
{
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	00 d0       	rcall	.+0      	; 0xc90 <ADC_voidChannelMulBoling+0x6>
     c90:	00 d0       	rcall	.+0      	; 0xc92 <ADC_voidChannelMulBoling+0x8>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
	u8 i =4 ;
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	8a 83       	std	Y+2, r24	; 0x02
	ACD_ERROR_RETURN local_error =OK ;
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	89 83       	std	Y+1, r24	; 0x01
	if(copy_Pu8Data!=NULL)
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	9c 81       	ldd	r25, Y+4	; 0x04
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	c1 f0       	breq	.+48     	; 0xcda <ADC_voidChannelMulBoling+0x50>
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <ADC_voidChannelMulBoling+0x48>
	{
		while(i!=0)
		{
			i-- ;
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	81 50       	subi	r24, 0x01	; 1
     cb0:	8a 83       	std	Y+2, r24	; 0x02
			ADC_voidChannelSellect(i);
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	0e 94 c0 05 	call	0xb80	; 0xb80 <ADC_voidChannelSellect>
			local_error =ADC_StartConversionBoling( (&copy_Pu8Data[i]) ) ;
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 01       	movw	r18, r24
     cc0:	22 0f       	add	r18, r18
     cc2:	33 1f       	adc	r19, r19
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	82 0f       	add	r24, r18
     cca:	93 1f       	adc	r25, r19
     ccc:	0e 94 de 05 	call	0xbbc	; 0xbbc <ADC_StartConversionBoling>
     cd0:	89 83       	std	Y+1, r24	; 0x01
{
	u8 i =4 ;
	ACD_ERROR_RETURN local_error =OK ;
	if(copy_Pu8Data!=NULL)
	{
		while(i!=0)
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	88 23       	and	r24, r24
     cd6:	51 f7       	brne	.-44     	; 0xcac <ADC_voidChannelMulBoling+0x22>
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <ADC_voidChannelMulBoling+0x52>
		}

	}
	else
	{
		local_error =NULL_ERROR ;
     cda:	19 82       	std	Y+1, r1	; 0x01
	}

	return  local_error ;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <ADC_Mapping>:
/*****************************************************************************************/



u16 ADC_Mapping( u16 x1 ,u16 x2 , u16 y1 ,u16 y2)
{
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	2c 97       	sbiw	r28, 0x0c	; 12
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
     d0c:	78 87       	std	Y+8, r23	; 0x08
     d0e:	6f 83       	std	Y+7, r22	; 0x07
     d10:	5a 87       	std	Y+10, r21	; 0x0a
     d12:	49 87       	std	Y+9, r20	; 0x09
     d14:	3c 87       	std	Y+12, r19	; 0x0c
     d16:	2b 87       	std	Y+11, r18	; 0x0b
	u16 data ;
	u16 local_adc_data = 0 ;
     d18:	1a 82       	std	Y+2, r1	; 0x02
     d1a:	19 82       	std	Y+1, r1	; 0x01
#if TYPE_DATA ==RIGHT_DATA
	//store data from REG ( ADC_DATA )  to copy_Pu8Data
	local_adc_data = ADC_DATA     ;
     d1c:	e4 e2       	ldi	r30, 0x24	; 36
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	9a 83       	std	Y+2, r25	; 0x02
     d26:	89 83       	std	Y+1, r24	; 0x01
#elif TYPE_DATA ==LEFT_DATA

	local_adc_data=((u16)ADC_DATA>>6) ;
#endif

	data =( ( (u32)(local_adc_data-x1)*(y2-y1) ) / (x2-x1) ) +y1 ;
     d28:	29 81       	ldd	r18, Y+1	; 0x01
     d2a:	3a 81       	ldd	r19, Y+2	; 0x02
     d2c:	8d 81       	ldd	r24, Y+5	; 0x05
     d2e:	9e 81       	ldd	r25, Y+6	; 0x06
     d30:	a9 01       	movw	r20, r18
     d32:	48 1b       	sub	r20, r24
     d34:	59 0b       	sbc	r21, r25
     d36:	ca 01       	movw	r24, r20
     d38:	7c 01       	movw	r14, r24
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	2b 85       	ldd	r18, Y+11	; 0x0b
     d40:	3c 85       	ldd	r19, Y+12	; 0x0c
     d42:	89 85       	ldd	r24, Y+9	; 0x09
     d44:	9a 85       	ldd	r25, Y+10	; 0x0a
     d46:	a9 01       	movw	r20, r18
     d48:	48 1b       	sub	r20, r24
     d4a:	59 0b       	sbc	r21, r25
     d4c:	ca 01       	movw	r24, r20
     d4e:	9c 01       	movw	r18, r24
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	0e 94 b9 13 	call	0x2772	; 0x2772 <__mulsi3>
     d5c:	7b 01       	movw	r14, r22
     d5e:	8c 01       	movw	r16, r24
     d60:	2f 81       	ldd	r18, Y+7	; 0x07
     d62:	38 85       	ldd	r19, Y+8	; 0x08
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	a9 01       	movw	r20, r18
     d6a:	48 1b       	sub	r20, r24
     d6c:	59 0b       	sbc	r21, r25
     d6e:	ca 01       	movw	r24, r20
     d70:	9c 01       	movw	r18, r24
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	c8 01       	movw	r24, r16
     d78:	b7 01       	movw	r22, r14
     d7a:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__udivmodsi4>
     d7e:	da 01       	movw	r26, r20
     d80:	c9 01       	movw	r24, r18
     d82:	9c 01       	movw	r18, r24
     d84:	89 85       	ldd	r24, Y+9	; 0x09
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	9c 83       	std	Y+4, r25	; 0x04
     d8e:	8b 83       	std	Y+3, r24	; 0x03

	return  data ;
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d94:	2c 96       	adiw	r28, 0x0c	; 12
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	08 95       	ret

00000dae <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <DIO_voidSetPortDirection+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <DIO_voidSetPortDirection+0x8>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	89 83       	std	Y+1, r24	; 0x01
     dbc:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3c 83       	std	Y+4, r19	; 0x04
     dc6:	2b 83       	std	Y+3, r18	; 0x03
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	9c 81       	ldd	r25, Y+4	; 0x04
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	d1 f0       	breq	.+52     	; 0xe06 <DIO_voidSetPortDirection+0x58>
     dd2:	2b 81       	ldd	r18, Y+3	; 0x03
     dd4:	3c 81       	ldd	r19, Y+4	; 0x04
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <DIO_voidSetPortDirection+0x38>
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	61 f0       	breq	.+24     	; 0xdfc <DIO_voidSetPortDirection+0x4e>
     de4:	1e c0       	rjmp	.+60     	; 0xe22 <DIO_voidSetPortDirection+0x74>
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	81 f0       	breq	.+32     	; 0xe10 <DIO_voidSetPortDirection+0x62>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	81 f0       	breq	.+32     	; 0xe1a <DIO_voidSetPortDirection+0x6c>
     dfa:	13 c0       	rjmp	.+38     	; 0xe22 <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	80 83       	st	Z, r24
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	80 83       	st	Z, r24
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
     e10:	e4 e3       	ldi	r30, 0x34	; 52
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	80 83       	st	Z, r24
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	80 83       	st	Z, r24

	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <DIO_voidSetPortValue+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_voidSetPortValue+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	89 83       	std	Y+1, r24	; 0x01
     e3e:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	3c 83       	std	Y+4, r19	; 0x04
     e48:	2b 83       	std	Y+3, r18	; 0x03
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	d1 f0       	breq	.+52     	; 0xe88 <DIO_voidSetPortValue+0x58>
     e54:	2b 81       	ldd	r18, Y+3	; 0x03
     e56:	3c 81       	ldd	r19, Y+4	; 0x04
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	2c f4       	brge	.+10     	; 0xe68 <DIO_voidSetPortValue+0x38>
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	61 f0       	breq	.+24     	; 0xe7e <DIO_voidSetPortValue+0x4e>
     e66:	1e c0       	rjmp	.+60     	; 0xea4 <DIO_voidSetPortValue+0x74>
     e68:	2b 81       	ldd	r18, Y+3	; 0x03
     e6a:	3c 81       	ldd	r19, Y+4	; 0x04
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	81 f0       	breq	.+32     	; 0xe92 <DIO_voidSetPortValue+0x62>
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	91 05       	cpc	r25, r1
     e7a:	81 f0       	breq	.+32     	; 0xe9c <DIO_voidSetPortValue+0x6c>
     e7c:	13 c0       	rjmp	.+38     	; 0xea4 <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
     e7e:	eb e3       	ldi	r30, 0x3B	; 59
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	80 83       	st	Z, r24
     e86:	0e c0       	rjmp	.+28     	; 0xea4 <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
     e88:	e8 e3       	ldi	r30, 0x38	; 56
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	80 83       	st	Z, r24
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
     e92:	e5 e3       	ldi	r30, 0x35	; 53
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
     e9c:	e2 e3       	ldi	r30, 0x32	; 50
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	80 83       	st	Z, r24

	}
}
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	27 97       	sbiw	r28, 0x07	; 7
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	89 83       	std	Y+1, r24	; 0x01
     ec8:	6a 83       	std	Y+2, r22	; 0x02
     eca:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0 &&Copy_u8PinID<=PIN7)
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	88 30       	cpi	r24, 0x08	; 8
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <DIO_voidSetPinDirection+0x22>
     ed2:	ea c0       	rjmp	.+468    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	09 f0       	breq	.+2      	; 0xedc <DIO_voidSetPinDirection+0x2a>
     eda:	6f c0       	rjmp	.+222    	; 0xfba <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	3f 83       	std	Y+7, r19	; 0x07
     ee4:	2e 83       	std	Y+6, r18	; 0x06
     ee6:	8e 81       	ldd	r24, Y+6	; 0x06
     ee8:	9f 81       	ldd	r25, Y+7	; 0x07
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	91 05       	cpc	r25, r1
     eee:	49 f1       	breq	.+82     	; 0xf42 <DIO_voidSetPinDirection+0x90>
     ef0:	2e 81       	ldd	r18, Y+6	; 0x06
     ef2:	3f 81       	ldd	r19, Y+7	; 0x07
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	31 05       	cpc	r19, r1
     ef8:	2c f4       	brge	.+10     	; 0xf04 <DIO_voidSetPinDirection+0x52>
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	61 f0       	breq	.+24     	; 0xf1a <DIO_voidSetPinDirection+0x68>
     f02:	d2 c0       	rjmp	.+420    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	71 f1       	breq	.+92     	; 0xf6a <DIO_voidSetPinDirection+0xb8>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	91 05       	cpc	r25, r1
     f16:	e9 f1       	breq	.+122    	; 0xf92 <DIO_voidSetPinDirection+0xe0>
     f18:	c7 c0       	rjmp	.+398    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
     f1a:	aa e3       	ldi	r26, 0x3A	; 58
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <DIO_voidSetPinDirection+0x86>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <DIO_voidSetPinDirection+0x82>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	b3 c0       	rjmp	.+358    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
     f42:	a7 e3       	ldi	r26, 0x37	; 55
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e7 e3       	ldi	r30, 0x37	; 55
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_voidSetPinDirection+0xae>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_voidSetPinDirection+0xaa>
     f64:	84 2b       	or	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	9f c0       	rjmp	.+318    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
     f6a:	a4 e3       	ldi	r26, 0x34	; 52
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e4 e3       	ldi	r30, 0x34	; 52
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_voidSetPinDirection+0xd6>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_voidSetPinDirection+0xd2>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	8b c0       	rjmp	.+278    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
     f92:	a1 e3       	ldi	r26, 0x31	; 49
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e1 e3       	ldi	r30, 0x31	; 49
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_voidSetPinDirection+0xfe>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_voidSetPinDirection+0xfa>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	77 c0       	rjmp	.+238    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 23       	and	r24, r24
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <DIO_voidSetPinDirection+0x110>
     fc0:	73 c0       	rjmp	.+230    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	3d 83       	std	Y+5, r19	; 0x05
     fca:	2c 83       	std	Y+4, r18	; 0x04
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	9d 81       	ldd	r25, Y+5	; 0x05
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	91 05       	cpc	r25, r1
     fd4:	59 f1       	breq	.+86     	; 0x102c <DIO_voidSetPinDirection+0x17a>
     fd6:	2c 81       	ldd	r18, Y+4	; 0x04
     fd8:	3d 81       	ldd	r19, Y+5	; 0x05
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	2c f4       	brge	.+10     	; 0xfea <DIO_voidSetPinDirection+0x138>
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f0       	breq	.+26     	; 0x1002 <DIO_voidSetPinDirection+0x150>
     fe8:	5f c0       	rjmp	.+190    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	89 f1       	breq	.+98     	; 0x1056 <DIO_voidSetPinDirection+0x1a4>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <DIO_voidSetPinDirection+0x14e>
     ffe:	40 c0       	rjmp	.+128    	; 0x1080 <DIO_voidSetPinDirection+0x1ce>
    1000:	53 c0       	rjmp	.+166    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
    1002:	aa e3       	ldi	r26, 0x3A	; 58
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ea e3       	ldi	r30, 0x3A	; 58
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_voidSetPinDirection+0x16e>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_voidSetPinDirection+0x16a>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	3e c0       	rjmp	.+124    	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
    102c:	a7 e3       	ldi	r26, 0x37	; 55
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e7 e3       	ldi	r30, 0x37	; 55
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_voidSetPinDirection+0x198>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_voidSetPinDirection+0x194>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	29 c0       	rjmp	.+82     	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
    1056:	a4 e3       	ldi	r26, 0x34	; 52
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e4 e3       	ldi	r30, 0x34	; 52
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_voidSetPinDirection+0x1c2>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_voidSetPinDirection+0x1be>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
    1080:	a1 e3       	ldi	r26, 0x31	; 49
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e1 e3       	ldi	r30, 0x31	; 49
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_voidSetPinDirection+0x1ec>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_voidSetPinDirection+0x1e8>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
    10a8:	27 96       	adiw	r28, 0x07	; 7
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	27 97       	sbiw	r28, 0x07	; 7
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	6a 83       	std	Y+2, r22	; 0x02
    10d2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN0&&Copy_u8PinID<=PIN7)
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_voidSetPinValue+0x22>
    10da:	ea c0       	rjmp	.+468    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIO_voidSetPinValue+0x2a>
    10e2:	6f c0       	rjmp	.+222    	; 0x11c2 <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3f 83       	std	Y+7, r19	; 0x07
    10ec:	2e 83       	std	Y+6, r18	; 0x06
    10ee:	8e 81       	ldd	r24, Y+6	; 0x06
    10f0:	9f 81       	ldd	r25, Y+7	; 0x07
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	49 f1       	breq	.+82     	; 0x114a <DIO_voidSetPinValue+0x90>
    10f8:	2e 81       	ldd	r18, Y+6	; 0x06
    10fa:	3f 81       	ldd	r19, Y+7	; 0x07
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_voidSetPinValue+0x52>
    1102:	8e 81       	ldd	r24, Y+6	; 0x06
    1104:	9f 81       	ldd	r25, Y+7	; 0x07
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_voidSetPinValue+0x68>
    110a:	d2 c0       	rjmp	.+420    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
    110c:	2e 81       	ldd	r18, Y+6	; 0x06
    110e:	3f 81       	ldd	r19, Y+7	; 0x07
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	71 f1       	breq	.+92     	; 0x1172 <DIO_voidSetPinValue+0xb8>
    1116:	8e 81       	ldd	r24, Y+6	; 0x06
    1118:	9f 81       	ldd	r25, Y+7	; 0x07
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	e9 f1       	breq	.+122    	; 0x119a <DIO_voidSetPinValue+0xe0>
    1120:	c7 c0       	rjmp	.+398    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
    1122:	ab e3       	ldi	r26, 0x3B	; 59
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e3       	ldi	r30, 0x3B	; 59
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_voidSetPinValue+0x86>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_voidSetPinValue+0x82>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	b3 c0       	rjmp	.+358    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
    114a:	a8 e3       	ldi	r26, 0x38	; 56
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e8 e3       	ldi	r30, 0x38	; 56
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_voidSetPinValue+0xae>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_voidSetPinValue+0xaa>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	9f c0       	rjmp	.+318    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_voidSetPinValue+0xd6>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_voidSetPinValue+0xd2>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	8b c0       	rjmp	.+278    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_voidSetPinValue+0xfe>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_voidSetPinValue+0xfa>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	77 c0       	rjmp	.+238    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 23       	and	r24, r24
    11c6:	09 f0       	breq	.+2      	; 0x11ca <DIO_voidSetPinValue+0x110>
    11c8:	73 c0       	rjmp	.+230    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3d 83       	std	Y+5, r19	; 0x05
    11d2:	2c 83       	std	Y+4, r18	; 0x04
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	59 f1       	breq	.+86     	; 0x1234 <DIO_voidSetPinValue+0x17a>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <DIO_voidSetPinValue+0x138>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f0       	breq	.+26     	; 0x120a <DIO_voidSetPinValue+0x150>
    11f0:	5f c0       	rjmp	.+190    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	89 f1       	breq	.+98     	; 0x125e <DIO_voidSetPinValue+0x1a4>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	09 f4       	brne	.+2      	; 0x1208 <DIO_voidSetPinValue+0x14e>
    1206:	40 c0       	rjmp	.+128    	; 0x1288 <DIO_voidSetPinValue+0x1ce>
    1208:	53 c0       	rjmp	.+166    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
    120a:	ab e3       	ldi	r26, 0x3B	; 59
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	eb e3       	ldi	r30, 0x3B	; 59
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_voidSetPinValue+0x16e>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_voidSetPinValue+0x16a>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	3e c0       	rjmp	.+124    	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
    1234:	a8 e3       	ldi	r26, 0x38	; 56
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e8 e3       	ldi	r30, 0x38	; 56
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_voidSetPinValue+0x198>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_voidSetPinValue+0x194>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	29 c0       	rjmp	.+82     	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_voidSetPinValue+0x1c2>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_voidSetPinValue+0x1be>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	14 c0       	rjmp	.+40     	; 0x12b0 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_voidSetPinValue+0x1ec>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_voidSetPinValue+0x1e8>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24

			}
		}
	}
}
    12b0:	27 96       	adiw	r28, 0x07	; 7
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_u8GetBitValue+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_u8GetBitValue+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7 )
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <DIO_u8GetBitValue+0x1a>
    12da:	67 c0       	rjmp	.+206    	; 0x13aa <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3d 83       	std	Y+5, r19	; 0x05
    12e4:	2c 83       	std	Y+4, r18	; 0x04
    12e6:	4c 81       	ldd	r20, Y+4	; 0x04
    12e8:	5d 81       	ldd	r21, Y+5	; 0x05
    12ea:	41 30       	cpi	r20, 0x01	; 1
    12ec:	51 05       	cpc	r21, r1
    12ee:	41 f1       	breq	.+80     	; 0x1340 <DIO_u8GetBitValue+0x7e>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	91 05       	cpc	r25, r1
    12f8:	34 f4       	brge	.+12     	; 0x1306 <DIO_u8GetBitValue+0x44>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	21 15       	cp	r18, r1
    1300:	31 05       	cpc	r19, r1
    1302:	61 f0       	breq	.+24     	; 0x131c <DIO_u8GetBitValue+0x5a>
    1304:	52 c0       	rjmp	.+164    	; 0x13aa <DIO_u8GetBitValue+0xe8>
    1306:	4c 81       	ldd	r20, Y+4	; 0x04
    1308:	5d 81       	ldd	r21, Y+5	; 0x05
    130a:	42 30       	cpi	r20, 0x02	; 2
    130c:	51 05       	cpc	r21, r1
    130e:	51 f1       	breq	.+84     	; 0x1364 <DIO_u8GetBitValue+0xa2>
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	b9 f1       	breq	.+110    	; 0x1388 <DIO_u8GetBitValue+0xc6>
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    131c:	e9 e3       	ldi	r30, 0x39	; 57
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	a9 01       	movw	r20, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_u8GetBitValue+0x72>
    1330:	55 95       	asr	r21
    1332:	47 95       	ror	r20
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_u8GetBitValue+0x6e>
    1338:	ca 01       	movw	r24, r20
    133a:	81 70       	andi	r24, 0x01	; 1
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	35 c0       	rjmp	.+106    	; 0x13aa <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    1340:	e6 e3       	ldi	r30, 0x36	; 54
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_u8GetBitValue+0x96>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_u8GetBitValue+0x92>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	23 c0       	rjmp	.+70     	; 0x13aa <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_u8GetBitValue+0xba>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_u8GetBitValue+0xb6>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	11 c0       	rjmp	.+34     	; 0x13aa <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1388:	e0 e3       	ldi	r30, 0x30	; 48
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8GetBitValue+0xde>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8GetBitValue+0xda>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_voidToggelPin>:
}
 */

/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_voidToggelPin+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <DIO_voidToggelPin+0x8>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN0 && Copy_u8PinID<=PIN7)
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	88 30       	cpi	r24, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <DIO_voidToggelPin+0x18>
    13d2:	6e c0       	rjmp	.+220    	; 0x14b0 <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3c 83       	std	Y+4, r19	; 0x04
    13dc:	2b 83       	std	Y+3, r18	; 0x03
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	49 f1       	breq	.+82     	; 0x143a <DIO_voidToggelPin+0x7e>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	2c f4       	brge	.+10     	; 0x13fc <DIO_voidToggelPin+0x40>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	61 f0       	breq	.+24     	; 0x1412 <DIO_voidToggelPin+0x56>
    13fa:	5a c0       	rjmp	.+180    	; 0x14b0 <DIO_voidToggelPin+0xf4>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	71 f1       	breq	.+92     	; 0x1462 <DIO_voidToggelPin+0xa6>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	e9 f1       	breq	.+122    	; 0x148a <DIO_voidToggelPin+0xce>
    1410:	4f c0       	rjmp	.+158    	; 0x14b0 <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    1412:	ab e3       	ldi	r26, 0x3B	; 59
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e3       	ldi	r30, 0x3B	; 59
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_voidToggelPin+0x74>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_voidToggelPin+0x70>
    1434:	84 27       	eor	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	3b c0       	rjmp	.+118    	; 0x14b0 <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_voidToggelPin+0x9c>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_voidToggelPin+0x98>
    145c:	84 27       	eor	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	27 c0       	rjmp	.+78     	; 0x14b0 <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    1462:	a5 e3       	ldi	r26, 0x35	; 53
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <DIO_voidToggelPin+0xc4>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <DIO_voidToggelPin+0xc0>
    1484:	84 27       	eor	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	13 c0       	rjmp	.+38     	; 0x14b0 <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    148a:	a2 e3       	ldi	r26, 0x32	; 50
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e2 e3       	ldi	r30, 0x32	; 50
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <DIO_voidToggelPin+0xec>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <DIO_voidToggelPin+0xe8>
    14ac:	84 27       	eor	r24, r20
    14ae:	8c 93       	st	X, r24
		}

	}
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <EXTINT_voidInit>:



#ifdef EXT_Init_NORMAL
void EXTINT_voidInit(u8 copy_u8ExtNum,u8 copy_u8ControlSens)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EXTINT_voidInit+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <EXTINT_voidInit+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8ExtNum)
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3c 83       	std	Y+4, r19	; 0x04
    14d6:	2b 83       	std	Y+3, r18	; 0x03
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	81 30       	cpi	r24, 0x01	; 1
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <EXTINT_voidInit+0x26>
    14e2:	40 c0       	rjmp	.+128    	; 0x1564 <EXTINT_voidInit+0xa6>
    14e4:	2b 81       	ldd	r18, Y+3	; 0x03
    14e6:	3c 81       	ldd	r19, Y+4	; 0x04
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <EXTINT_voidInit+0x32>
    14ee:	6f c0       	rjmp	.+222    	; 0x15ce <EXTINT_voidInit+0x110>
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	09 f0       	breq	.+2      	; 0x14fa <EXTINT_voidInit+0x3c>
    14f8:	90 c0       	rjmp	.+288    	; 0x161a <EXTINT_voidInit+0x15c>
	{
	case EXT0_ID :


		DIO_voidSetPinDirection(PORTD_ID,PIN2,PIN_INPUT);
    14fa:	83 e0       	ldi	r24, 0x03	; 3
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTD_ID,PIN2,PIN_HIGH);
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	88 23       	and	r24, r24
    1512:	79 f4       	brne	.+30     	; 0x1532 <EXTINT_voidInit+0x74>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC00);
    1514:	a5 e5       	ldi	r26, 0x55	; 85
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e5       	ldi	r30, 0x55	; 85
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	8c 93       	st	X, r24
    1530:	11 c0       	rjmp	.+34     	; 0x1554 <EXTINT_voidInit+0x96>

		}


		else if(copy_u8ControlSens==RISING_EDGE)
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	71 f4       	brne	.+28     	; 0x1554 <EXTINT_voidInit+0x96>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC00);
    1538:	a5 e5       	ldi	r26, 0x55	; 85
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e5 e5       	ldi	r30, 0x55	; 85
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	81 60       	ori	r24, 0x01	; 1
    1544:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC01);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	82 60       	ori	r24, 0x02	; 2
    1552:	8c 93       	st	X, r24
		}

		SET_BIT(GICR_REG,GICR_INT0);
    1554:	ab e5       	ldi	r26, 0x5B	; 91
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e5       	ldi	r30, 0x5B	; 91
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 64       	ori	r24, 0x40	; 64
    1560:	8c 93       	st	X, r24
    1562:	5b c0       	rjmp	.+182    	; 0x161a <EXTINT_voidInit+0x15c>
		break ;


	case EXT1_ID :

		DIO_voidSetPinDirection(PORTD_ID,PIN3,PIN_INPUT);
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	63 e0       	ldi	r22, 0x03	; 3
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTD_ID,PIN3,PIN_HIGH);
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	88 23       	and	r24, r24
    157c:	79 f4       	brne	.+30     	; 0x159c <EXTINT_voidInit+0xde>
		{

			CLR_BIT(MCUCR_REG,MCUCR_ISC10);
    157e:	a5 e5       	ldi	r26, 0x55	; 85
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 e5       	ldi	r30, 0x55	; 85
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8b 7f       	andi	r24, 0xFB	; 251
    158a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	88 60       	ori	r24, 0x08	; 8
    1598:	8c 93       	st	X, r24
    159a:	11 c0       	rjmp	.+34     	; 0x15be <EXTINT_voidInit+0x100>

		}

		else if(copy_u8ControlSens==RISING_EDGE)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	71 f4       	brne	.+28     	; 0x15be <EXTINT_voidInit+0x100>
		{
			SET_BIT(MCUCR_REG,MCUCR_ISC10);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	84 60       	ori	r24, 0x04	; 4
    15ae:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,MCUCR_ISC11);
    15b0:	a5 e5       	ldi	r26, 0x55	; 85
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e5 e5       	ldi	r30, 0x55	; 85
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	88 60       	ori	r24, 0x08	; 8
    15bc:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT1);
    15be:	ab e5       	ldi	r26, 0x5B	; 91
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	eb e5       	ldi	r30, 0x5B	; 91
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	80 68       	ori	r24, 0x80	; 128
    15ca:	8c 93       	st	X, r24
    15cc:	26 c0       	rjmp	.+76     	; 0x161a <EXTINT_voidInit+0x15c>

		break ;

	case EXT2_ID :

		DIO_voidSetPinDirection(PORTB_ID,PIN2,PIN_INPUT);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	62 e0       	ldi	r22, 0x02	; 2
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PORTB_ID,PIN2,PIN_HIGH);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
		if(copy_u8ControlSens==FALLING_EDGE)
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	88 23       	and	r24, r24
    15e6:	41 f4       	brne	.+16     	; 0x15f8 <EXTINT_voidInit+0x13a>
		{
			CLR_BIT(MCUCSR_REG,MCUCSR_ISC2);
    15e8:	a4 e5       	ldi	r26, 0x54	; 84
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e4 e5       	ldi	r30, 0x54	; 84
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <EXTINT_voidInit+0x14e>
		}

		else if(copy_u8ControlSens==RISING_EDGE)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	39 f4       	brne	.+14     	; 0x160c <EXTINT_voidInit+0x14e>
		{
			SET_BIT(MCUCSR_REG,MCUCSR_ISC2);
    15fe:	a4 e5       	ldi	r26, 0x54	; 84
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e4 e5       	ldi	r30, 0x54	; 84
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 64       	ori	r24, 0x40	; 64
    160a:	8c 93       	st	X, r24
		}
		SET_BIT(GICR_REG,GICR_INT2);
    160c:	ab e5       	ldi	r26, 0x5B	; 91
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e5       	ldi	r30, 0x5B	; 91
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	80 62       	ori	r24, 0x20	; 32
    1618:	8c 93       	st	X, r24

		break ;

	}
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <EXTINT_voidSetCallBack>:




void EXTINT_voidSetCallBack (  void (*ptr_ext)(void) ,u8 copy_u8ExtNum )
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <EXTINT_voidSetCallBack+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <EXTINT_voidSetCallBack+0x8>
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	6b 83       	std	Y+3, r22	; 0x03

	if(ptr_ext!=NULL)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	39 f1       	breq	.+78     	; 0x1692 <EXTINT_voidSetCallBack+0x6a>
	{
		switch(copy_u8ExtNum)
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3d 83       	std	Y+5, r19	; 0x05
    164c:	2c 83       	std	Y+4, r18	; 0x04
    164e:	8c 81       	ldd	r24, Y+4	; 0x04
    1650:	9d 81       	ldd	r25, Y+5	; 0x05
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <EXTINT_voidSetCallBack+0x50>
    1658:	2c 81       	ldd	r18, Y+4	; 0x04
    165a:	3d 81       	ldd	r19, Y+5	; 0x05
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	91 f0       	breq	.+36     	; 0x1686 <EXTINT_voidSetCallBack+0x5e>
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	a1 f4       	brne	.+40     	; 0x1692 <EXTINT_voidSetCallBack+0x6a>
		{
		case EXT0_ID:
			ptr_ArrCallBack[ 0 ]= ptr_ext;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	9a 81       	ldd	r25, Y+2	; 0x02
    166e:	90 93 89 00 	sts	0x0089, r25
    1672:	80 93 88 00 	sts	0x0088, r24
    1676:	0d c0       	rjmp	.+26     	; 0x1692 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT1_ID:
			ptr_ArrCallBack[ 1 ]= ptr_ext;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	9a 81       	ldd	r25, Y+2	; 0x02
    167c:	90 93 8b 00 	sts	0x008B, r25
    1680:	80 93 8a 00 	sts	0x008A, r24
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <EXTINT_voidSetCallBack+0x6a>
			break;
		case EXT2_ID:
			ptr_ArrCallBack[ 2 ]= ptr_ext;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	9a 81       	ldd	r25, Y+2	; 0x02
    168a:	90 93 8d 00 	sts	0x008D, r25
    168e:	80 93 8c 00 	sts	0x008C, r24
		}



	}
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <__vector_1>:



void __vector_1 () __attribute__ ((signal));
void __vector_1 ()
{
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	2f 93       	push	r18
    16ae:	3f 93       	push	r19
    16b0:	4f 93       	push	r20
    16b2:	5f 93       	push	r21
    16b4:	6f 93       	push	r22
    16b6:	7f 93       	push	r23
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
    16bc:	af 93       	push	r26
    16be:	bf 93       	push	r27
    16c0:	ef 93       	push	r30
    16c2:	ff 93       	push	r31
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62

	if(ptr_ArrCallBack[0] !=NULL)
    16cc:	80 91 88 00 	lds	r24, 0x0088
    16d0:	90 91 89 00 	lds	r25, 0x0089
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <__vector_1+0x40>
	{
		ptr_ArrCallBack[0]();
    16d8:	e0 91 88 00 	lds	r30, 0x0088
    16dc:	f0 91 89 00 	lds	r31, 0x0089
    16e0:	09 95       	icall
	}



}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	0f 90       	pop	r0
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	0f 90       	pop	r0
    1704:	1f 90       	pop	r1
    1706:	18 95       	reti

00001708 <__vector_2>:

void __vector_2 () __attribute__ ((signal));
void __vector_2 ()
{
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[1] !=NULL)
    1732:	80 91 8a 00 	lds	r24, 0x008A
    1736:	90 91 8b 00 	lds	r25, 0x008B
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	29 f0       	breq	.+10     	; 0x1748 <__vector_2+0x40>
		{
		ptr_ArrCallBack[1]();
    173e:	e0 91 8a 00 	lds	r30, 0x008A
    1742:	f0 91 8b 00 	lds	r31, 0x008B
    1746:	09 95       	icall
		}


}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_3>:

void __vector_3 () __attribute__ ((signal));
void __vector_3 ()
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	if(ptr_ArrCallBack[2] !=NULL)
    1798:	80 91 8c 00 	lds	r24, 0x008C
    179c:	90 91 8d 00 	lds	r25, 0x008D
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	29 f0       	breq	.+10     	; 0x17ae <__vector_3+0x40>
		{
		ptr_ArrCallBack[2]();
    17a4:	e0 91 8c 00 	lds	r30, 0x008C
    17a8:	f0 91 8d 00 	lds	r31, 0x008D
    17ac:	09 95       	icall
		}


}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	ff 91       	pop	r31
    17b4:	ef 91       	pop	r30
    17b6:	bf 91       	pop	r27
    17b8:	af 91       	pop	r26
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	7f 91       	pop	r23
    17c0:	6f 91       	pop	r22
    17c2:	5f 91       	pop	r21
    17c4:	4f 91       	pop	r20
    17c6:	3f 91       	pop	r19
    17c8:	2f 91       	pop	r18
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    17dc:	af e5       	ldi	r26, 0x5F	; 95
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ef e5       	ldi	r30, 0x5F	; 95
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	8c 93       	st	X, r24

}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <GIE_Disable>:

void GIE_Disable(void)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    17f8:	af e5       	ldi	r26, 0x5F	; 95
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ef e5       	ldi	r30, 0x5F	; 95
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 77       	andi	r24, 0x7F	; 127
    1804:	8c 93       	st	X, r24

}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	2e 97       	sbiw	r28, 0x0e	; 14
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 ef       	ldi	r26, 0xF0	; 240
    1826:	b1 e4       	ldi	r27, 0x41	; 65
    1828:	8b 87       	std	Y+11, r24	; 0x0b
    182a:	9c 87       	std	Y+12, r25	; 0x0c
    182c:	ad 87       	std	Y+13, r26	; 0x0d
    182e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6b 85       	ldd	r22, Y+11	; 0x0b
    1832:	7c 85       	ldd	r23, Y+12	; 0x0c
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	98 87       	std	Y+8, r25	; 0x08
    184c:	a9 87       	std	Y+9, r26	; 0x09
    184e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <LCD_voidInit+0x66>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1872:	6f 81       	ldd	r22, Y+7	; 0x07
    1874:	78 85       	ldd	r23, Y+8	; 0x08
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6b 85       	ldd	r22, Y+11	; 0x0b
    188c:	7c 85       	ldd	r23, Y+12	; 0x0c
    188e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1890:	9e 85       	ldd	r25, Y+14	; 0x0e
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <LCD_voidInit+0xc6>
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_voidInit+0xb4>
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <LCD_voidInit+0xa8>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <LCD_voidInit+0xf0>
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	63 e0       	ldi	r22, 0x03	; 3
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	64 e0       	ldi	r22, 0x04	; 4
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	65 e0       	ldi	r22, 0x05	; 5
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	66 e0       	ldi	r22, 0x06	; 6
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	67 e0       	ldi	r22, 0x07	; 7
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    1946:	88 e2       	ldi	r24, 0x28	; 40
    1948:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    194c:	8c e0       	ldi	r24, 0x0C	; 12
    194e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

}
    195e:	2e 96       	adiw	r28, 0x0e	; 14
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	6d 97       	sbiw	r28, 0x1d	; 29
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN7) );
    1986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1988:	98 2f       	mov	r25, r24
    198a:	99 1f       	adc	r25, r25
    198c:	99 27       	eor	r25, r25
    198e:	99 1f       	adc	r25, r25
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	67 e0       	ldi	r22, 0x07	; 7
    1994:	49 2f       	mov	r20, r25
    1996:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN6) );
    199a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199c:	82 95       	swap	r24
    199e:	86 95       	lsr	r24
    19a0:	86 95       	lsr	r24
    19a2:	83 70       	andi	r24, 0x03	; 3
    19a4:	98 2f       	mov	r25, r24
    19a6:	91 70       	andi	r25, 0x01	; 1
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	66 e0       	ldi	r22, 0x06	; 6
    19ac:	49 2f       	mov	r20, r25
    19ae:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN5) );
    19b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b4:	82 95       	swap	r24
    19b6:	86 95       	lsr	r24
    19b8:	87 70       	andi	r24, 0x07	; 7
    19ba:	98 2f       	mov	r25, r24
    19bc:	91 70       	andi	r25, 0x01	; 1
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	65 e0       	ldi	r22, 0x05	; 5
    19c2:	49 2f       	mov	r20, r25
    19c4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN4) );
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	82 95       	swap	r24
    19cc:	8f 70       	andi	r24, 0x0F	; 15
    19ce:	98 2f       	mov	r25, r24
    19d0:	91 70       	andi	r25, 0x01	; 1
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	64 e0       	ldi	r22, 0x04	; 4
    19d6:	49 2f       	mov	r20, r25
    19d8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	63 e0       	ldi	r22, 0x03	; 3
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e0       	ldi	r26, 0x00	; 0
    19ec:	b0 e4       	ldi	r27, 0x40	; 64
    19ee:	89 8f       	std	Y+25, r24	; 0x19
    19f0:	9a 8f       	std	Y+26, r25	; 0x1a
    19f2:	ab 8f       	std	Y+27, r26	; 0x1b
    19f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	69 8d       	ldd	r22, Y+25	; 0x19
    19f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8d 8b       	std	Y+21, r24	; 0x15
    1a10:	9e 8b       	std	Y+22, r25	; 0x16
    1a12:	af 8b       	std	Y+23, r26	; 0x17
    1a14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a16:	6d 89       	ldd	r22, Y+21	; 0x15
    1a18:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    1a38:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	69 8d       	ldd	r22, Y+25	; 0x19
    1a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9c 8b       	std	Y+20, r25	; 0x14
    1a76:	8b 8b       	std	Y+19, r24	; 0x13
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_voidWriteBitsToSend+0x128>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9a 8b       	std	Y+18, r25	; 0x12
    1a80:	89 8b       	std	Y+17, r24	; 0x11
    1a82:	89 89       	ldd	r24, Y+17	; 0x11
    1a84:	9a 89       	ldd	r25, Y+18	; 0x12
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_voidWriteBitsToSend+0x116>
    1a8a:	9a 8b       	std	Y+18, r25	; 0x12
    1a8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9c 8b       	std	Y+20, r25	; 0x14
    1a96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <LCD_voidWriteBitsToSend+0x10a>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9c 8b       	std	Y+20, r25	; 0x14
    1ab4:	8b 8b       	std	Y+19, r24	; 0x13
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	98 8b       	std	Y+16, r25	; 0x10
    1abc:	8f 87       	std	Y+15, r24	; 0x0f
    1abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac0:	98 89       	ldd	r25, Y+16	; 0x10
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_voidWriteBitsToSend+0x152>
    1ac6:	98 8b       	std	Y+16, r25	; 0x10
    1ac8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	63 e0       	ldi	r22, 0x03	; 3
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN3) );
    1ad4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad6:	86 95       	lsr	r24
    1ad8:	86 95       	lsr	r24
    1ada:	86 95       	lsr	r24
    1adc:	98 2f       	mov	r25, r24
    1ade:	91 70       	andi	r25, 0x01	; 1
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	67 e0       	ldi	r22, 0x07	; 7
    1ae4:	49 2f       	mov	r20, r25
    1ae6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN2) );
    1aea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	98 2f       	mov	r25, r24
    1af2:	91 70       	andi	r25, 0x01	; 1
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	66 e0       	ldi	r22, 0x06	; 6
    1af8:	49 2f       	mov	r20, r25
    1afa:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN1) );
    1afe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b00:	86 95       	lsr	r24
    1b02:	98 2f       	mov	r25, r24
    1b04:	91 70       	andi	r25, 0x01	; 1
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	65 e0       	ldi	r22, 0x05	; 5
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN0) );
    1b10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b12:	98 2f       	mov	r25, r24
    1b14:	91 70       	andi	r25, 0x01	; 1
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	64 e0       	ldi	r22, 0x04	; 4
    1b1a:	49 2f       	mov	r20, r25
    1b1c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	63 e0       	ldi	r22, 0x03	; 3
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e4       	ldi	r27, 0x40	; 64
    1b32:	8b 87       	std	Y+11, r24	; 0x0b
    1b34:	9c 87       	std	Y+12, r25	; 0x0c
    1b36:	ad 87       	std	Y+13, r26	; 0x0d
    1b38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8f 83       	std	Y+7, r24	; 0x07
    1b54:	98 87       	std	Y+8, r25	; 0x08
    1b56:	a9 87       	std	Y+9, r26	; 0x09
    1b58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5c:	78 85       	ldd	r23, Y+8	; 0x08
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	4c f5       	brge	.+82     	; 0x1be6 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <LCD_voidWriteBitsToSend+0x26c>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 83       	std	Y+4, r25	; 0x04
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_voidWriteBitsToSend+0x25a>
    1bce:	9c 83       	std	Y+4, r25	; 0x04
    1bd0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9e 83       	std	Y+6, r25	; 0x06
    1bda:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <LCD_voidWriteBitsToSend+0x24e>
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	6f 81       	ldd	r22, Y+7	; 0x07
    1be8:	78 85       	ldd	r23, Y+8	; 0x08
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	9a 83       	std	Y+2, r25	; 0x02
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	9a 81       	ldd	r25, Y+2	; 0x02
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_voidWriteBitsToSend+0x296>
    1c0a:	9a 83       	std	Y+2, r25	; 0x02
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	63 e0       	ldi	r22, 0x03	; 3
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>




}
    1c18:	6d 96       	adiw	r28, 0x1d	; 29
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	0e 94 b8 0c 	call	0x1970	; 0x1970 <LCD_voidWriteBitsToSend>
}
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	62 e0       	ldi	r22, 0x02	; 2
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 5d 08 	call	0x10ba	; 0x10ba <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	0e 94 b8 0c 	call	0x1970	; 0x1970 <LCD_voidWriteBitsToSend>
}
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <LCD_voidWriteString+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <LCD_voidWriteString+0x8>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    1c82:	1a 82       	std	Y+2, r1	; 0x02
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	f9 01       	movw	r30, r18
    1c92:	e8 0f       	add	r30, r24
    1c94:	f9 1f       	adc	r31, r25
    1c96:	80 81       	ld	r24, Z
    1c98:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_voidWriteData>
		i++;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	f9 01       	movw	r30, r18
    1cb0:	e8 0f       	add	r30, r24
    1cb2:	f9 1f       	adc	r31, r25
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 23       	and	r24, r24
    1cb8:	39 f7       	brne	.-50     	; 0x1c88 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	27 97       	sbiw	r28, 0x07	; 7
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	8e 83       	std	Y+6, r24	; 0x06
    1cde:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    1ce0:	1a 82       	std	Y+2, r1	; 0x02
    1ce2:	80 e4       	ldi	r24, 0x40	; 64
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	84 e1       	ldi	r24, 0x14	; 20
    1ce8:	8c 83       	std	Y+4, r24	; 0x04
    1cea:	84 e5       	ldi	r24, 0x54	; 84
    1cec:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    1cee:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	02 96       	adiw	r24, 0x02	; 2
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	e2 0f       	add	r30, r18
    1cfc:	f3 1f       	adc	r31, r19
    1cfe:	90 81       	ld	r25, Z
    1d00:	8f 81       	ldd	r24, Y+7	; 0x07
    1d02:	89 0f       	add	r24, r25
    1d04:	80 58       	subi	r24, 0x80	; 128
    1d06:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

}
    1d0e:	27 96       	adiw	r28, 0x07	; 7
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>

}
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	63 97       	sbiw	r28, 0x13	; 19
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	68 8b       	std	Y+16, r22	; 0x10
    1d4e:	79 8b       	std	Y+17, r23	; 0x11
    1d50:	8a 8b       	std	Y+18, r24	; 0x12
    1d52:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	99 89       	ldd	r25, Y+17	; 0x11
    1d58:	aa 89       	ldd	r26, Y+18	; 0x12
    1d5a:	bb 89       	ldd	r27, Y+19	; 0x13
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	9b 83       	std	Y+3, r25	; 0x03
    1d60:	ac 83       	std	Y+4, r26	; 0x04
    1d62:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1d64:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	08 2f       	mov	r16, r24
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	ac 81       	ldd	r26, Y+4	; 0x04
    1d72:	bd 81       	ldd	r27, Y+5	; 0x05
    1d74:	2a e0       	ldi	r18, 0x0A	; 10
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__udivmodsi4>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	28 2f       	mov	r18, r24
    1d8a:	20 5d       	subi	r18, 0xD0	; 208
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	06 96       	adiw	r24, 0x06	; 6
    1d90:	fc 01       	movw	r30, r24
    1d92:	e0 0f       	add	r30, r16
    1d94:	f1 1f       	adc	r31, r17
    1d96:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	ac 81       	ldd	r26, Y+4	; 0x04
    1d9e:	bd 81       	ldd	r27, Y+5	; 0x05
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <__udivmodsi4>
    1db0:	da 01       	movw	r26, r20
    1db2:	c9 01       	movw	r24, r18
    1db4:	8a 83       	std	Y+2, r24	; 0x02
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	ac 83       	std	Y+4, r26	; 0x04
    1dba:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	8f 5f       	subi	r24, 0xFF	; 255
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	ac 81       	ldd	r26, Y+4	; 0x04
    1dc8:	bd 81       	ldd	r27, Y+5	; 0x05
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	a1 05       	cpc	r26, r1
    1dce:	b1 05       	cpc	r27, r1
    1dd0:	51 f6       	brne	.-108    	; 0x1d66 <LCD_voidWriteNumber+0x32>
    1dd2:	11 c0       	rjmp	.+34     	; 0x1df6 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	21 50       	subi	r18, 0x01	; 1
    1dde:	30 40       	sbci	r19, 0x00	; 0
    1de0:	ce 01       	movw	r24, r28
    1de2:	06 96       	adiw	r24, 0x06	; 6
    1de4:	fc 01       	movw	r30, r24
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	80 81       	ld	r24, Z
    1dec:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 23       	and	r24, r24
    1dfa:	61 f7       	brne	.-40     	; 0x1dd4 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    1dfc:	63 96       	adiw	r28, 0x13	; 19
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <LCD_voidWriteSpecialCharToCGRAM+0x8>
    1e1a:	0f 92       	push	r0
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    1e26:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    1e28:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	08 96       	adiw	r24, 0x08	; 8
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	0e c0       	rjmp	.+28     	; 0x1e64 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	9c 81       	ldd	r25, Y+4	; 0x04
    1e52:	fc 01       	movw	r30, r24
    1e54:	e2 0f       	add	r30, r18
    1e56:	f3 1f       	adc	r31, r19
    1e58:	80 81       	ld	r24, Z
    1e5a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	88 30       	cpi	r24, 0x08	; 8
    1e68:	78 f3       	brcs	.-34     	; 0x1e48 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

}
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_voidWriteData>

}
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <M_TWI_void_Init>:


/*------------------------------------------------------------------------*/

void M_TWI_void_Init(void)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
#if   TWI_MODE   ==   TWI_MASTER_MODE
	TWBR_REG = (  ( ((u32)F_OSC * 1000000) / F_SCL) - 16) / 2;
    1e9c:	e0 e2       	ldi	r30, 0x20	; 32
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	82 e0       	ldi	r24, 0x02	; 2
    1ea2:	80 83       	st	Z, r24
	CLR_BIT(TWSR_REG,TWSR_TWPS0);
    1ea4:	a1 e2       	ldi	r26, 0x21	; 33
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e1 e2       	ldi	r30, 0x21	; 33
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	8e 7f       	andi	r24, 0xFE	; 254
    1eb0:	8c 93       	st	X, r24
	CLR_BIT(TWSR_REG,TWSR_TWPS1);
    1eb2:	a1 e2       	ldi	r26, 0x21	; 33
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e1 e2       	ldi	r30, 0x21	; 33
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8d 7f       	andi	r24, 0xFD	; 253
    1ebe:	8c 93       	st	X, r24


	/*EN ACK*/

	/*EN TWI */
	SET_BIT(TWCR_REG,TWCR_TWEN);
    1ec0:	a6 e5       	ldi	r26, 0x56	; 86
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e6 e5       	ldi	r30, 0x56	; 86
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	84 60       	ori	r24, 0x04	; 4
    1ecc:	8c 93       	st	X, r24
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <M_TWI_u8_StartCondition>:
/*------------------------------------------------------------------------*/



TWI_ERROR_STATUS M_TWI_u8_StartCondition(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */

	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1ee2:	a6 e5       	ldi	r26, 0x56	; 86
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e6 e5       	ldi	r30, 0x56	; 86
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 62       	ori	r24, 0x20	; 32
    1eee:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1ef0:	a6 e5       	ldi	r26, 0x56	; 86
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e6 e5       	ldi	r30, 0x56	; 86
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 68       	ori	r24, 0x80	; 128
    1efc:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1efe:	e6 e5       	ldi	r30, 0x56	; 86
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 23       	and	r24, r24
    1f06:	dc f7       	brge	.-10     	; 0x1efe <M_TWI_u8_StartCondition+0x2a>

	if((TWSR_REG & 0xF8) != TWI_START_COND_ACK)
    1f08:	e1 e2       	ldi	r30, 0x21	; 33
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	88 7f       	andi	r24, 0xF8	; 248
    1f14:	90 70       	andi	r25, 0x00	; 0
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	91 05       	cpc	r25, r1
    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <M_TWI_u8_StartCondition+0x4c>
	{
		local_error=START_ERROR;
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <M_TWI_void_StopCondition>:

/***************************************************************************/

void M_TWI_void_StopCondition(void)

{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62

	/* Stop Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTO);
    1f32:	a6 e5       	ldi	r26, 0x56	; 86
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e6 e5       	ldi	r30, 0x56	; 86
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 61       	ori	r24, 0x10	; 16
    1f3e:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1f40:	a6 e5       	ldi	r26, 0x56	; 86
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e6 e5       	ldi	r30, 0x56	; 86
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	80 68       	ori	r24, 0x80	; 128
    1f4c:	8c 93       	st	X, r24

}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <M_TWI_u8_RepeatedStart>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_RepeatedStart(void)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1f62:	a6 e5       	ldi	r26, 0x56	; 86
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e6 e5       	ldi	r30, 0x56	; 86
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 62       	ori	r24, 0x20	; 32
    1f6e:	8c 93       	st	X, r24


	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1f70:	a6 e5       	ldi	r26, 0x56	; 86
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e6 e5       	ldi	r30, 0x56	; 86
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 68       	ori	r24, 0x80	; 128
    1f7c:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1f7e:	e6 e5       	ldi	r30, 0x56	; 86
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	88 23       	and	r24, r24
    1f86:	dc f7       	brge	.-10     	; 0x1f7e <M_TWI_u8_RepeatedStart+0x2a>


	if((TWSR_REG & 0xF8) != TWI_REPEATED_START_COND_ACK)
    1f88:	e1 e2       	ldi	r30, 0x21	; 33
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	88 7f       	andi	r24, 0xF8	; 248
    1f94:	90 70       	andi	r25, 0x00	; 0
    1f96:	80 31       	cpi	r24, 0x10	; 16
    1f98:	91 05       	cpc	r25, r1
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <M_TWI_u8_RepeatedStart+0x4c>
	{
		local_error=REPEATED_STSRT_ERROR;
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <M_TWI_u8_SendSlaveAddressWrite>:
/***************************************************************************/



TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressWrite(u8 Copy_u8Address)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <M_TWI_u8_SendSlaveAddressWrite+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error = NO_ERROR ;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = (Copy_u8Address << 1);
    1fba:	e3 e2       	ldi	r30, 0x23	; 35
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	88 0f       	add	r24, r24
    1fc2:	80 83       	st	Z, r24
	CLR_BIT(TWDR_REG,0);
    1fc4:	a3 e2       	ldi	r26, 0x23	; 35
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e2       	ldi	r30, 0x23	; 35
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8e 7f       	andi	r24, 0xFE	; 254
    1fd0:	8c 93       	st	X, r24



	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1fd2:	a6 e5       	ldi	r26, 0x56	; 86
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e6 e5       	ldi	r30, 0x56	; 86
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 7d       	andi	r24, 0xDF	; 223
    1fde:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1fe0:	a6 e5       	ldi	r26, 0x56	; 86
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e6 e5       	ldi	r30, 0x56	; 86
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1fee:	e6 e5       	ldi	r30, 0x56	; 86
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	88 23       	and	r24, r24
    1ff6:	dc f7       	brge	.-10     	; 0x1fee <M_TWI_u8_SendSlaveAddressWrite+0x44>


	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_WRITE_ACK)
    1ff8:	e1 e2       	ldi	r30, 0x21	; 33
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	88 7f       	andi	r24, 0xF8	; 248
    2004:	90 70       	andi	r25, 0x00	; 0
    2006:	88 31       	cpi	r24, 0x18	; 24
    2008:	91 05       	cpc	r25, r1
    200a:	11 f0       	breq	.+4      	; 0x2010 <M_TWI_u8_SendSlaveAddressWrite+0x66>
	{
		local_error=SLAVE_ADDRESS_WRITE_ERROR;
    200c:	84 e0       	ldi	r24, 0x04	; 4
    200e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    2010:	89 81       	ldd	r24, Y+1	; 0x01
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <M_TWI_u8_SendSlaveAddressRead>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressRead(u8 Copy_u8Address)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <M_TWI_u8_SendSlaveAddressRead+0x6>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = ( (Copy_u8Address << 1) | 1);
    202c:	e3 e2       	ldi	r30, 0x23	; 35
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	81 60       	ori	r24, 0x01	; 1
    203c:	80 83       	st	Z, r24

	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    203e:	a6 e5       	ldi	r26, 0x56	; 86
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e6 e5       	ldi	r30, 0x56	; 86
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	8f 7d       	andi	r24, 0xDF	; 223
    204a:	8c 93       	st	X, r24


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    204c:	a6 e5       	ldi	r26, 0x56	; 86
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e5       	ldi	r30, 0x56	; 86
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 68       	ori	r24, 0x80	; 128
    2058:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    205a:	e6 e5       	ldi	r30, 0x56	; 86
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	88 23       	and	r24, r24
    2062:	dc f7       	brge	.-10     	; 0x205a <M_TWI_u8_SendSlaveAddressRead+0x3e>

	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_READ_ACK)
    2064:	e1 e2       	ldi	r30, 0x21	; 33
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	88 7f       	andi	r24, 0xF8	; 248
    2070:	90 70       	andi	r25, 0x00	; 0
    2072:	80 34       	cpi	r24, 0x40	; 64
    2074:	91 05       	cpc	r25, r1
    2076:	11 f0       	breq	.+4      	; 0x207c <M_TWI_u8_SendSlaveAddressRead+0x60>
	{
		local_error=SLAVE_ADDRESS_READ_ERROR;
    2078:	85 e0       	ldi	r24, 0x05	; 5
    207a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    207c:	89 81       	ldd	r24, Y+1	; 0x01

}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <M_TWI_u8_SendByte>:



/***************************************************************************/
TWI_ERROR_STATUS M_TWI_u8_SendByte(u8 Copy_u8Data)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <M_TWI_u8_SendByte+0x6>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01

	TWDR_REG = Copy_u8Data;
    2098:	e3 e2       	ldi	r30, 0x23	; 35
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 83       	st	Z, r24
	/* Clear Start condition */
	//CLR_BIT(TWCR_REG,TWCR_TWSTA);


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    20a0:	a6 e5       	ldi	r26, 0x56	; 86
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e5       	ldi	r30, 0x56	; 86
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 68       	ori	r24, 0x80	; 128
    20ac:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    20ae:	e6 e5       	ldi	r30, 0x56	; 86
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 23       	and	r24, r24
    20b6:	dc f7       	brge	.-10     	; 0x20ae <M_TWI_u8_SendByte+0x26>

	if((TWSR_REG & 0xF8) != TWI_SEND_BYTE_ACK)
    20b8:	e1 e2       	ldi	r30, 0x21	; 33
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	88 7f       	andi	r24, 0xF8	; 248
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	88 32       	cpi	r24, 0x28	; 40
    20c8:	91 05       	cpc	r25, r1
    20ca:	11 f0       	breq	.+4      	; 0x20d0 <M_TWI_u8_SendByte+0x48>
	{
		local_error=SEND_BYTE_ERROR;
    20cc:	86 e0       	ldi	r24, 0x06	; 6
    20ce:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    20d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <M_TWI_u8_ReadByte>:

/***************************************************************************/

TWI_ERROR_STATUS  M_TWI_u8_ReadByte(u8 *TWI_DATA)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <M_TWI_u8_ReadByte+0x6>
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	9b 83       	std	Y+3, r25	; 0x03
    20ea:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01


	TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWINT);
    20f0:	e6 e5       	ldi	r30, 0x56	; 86
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	84 ec       	ldi	r24, 0xC4	; 196
    20f6:	80 83       	st	Z, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    20f8:	e6 e5       	ldi	r30, 0x56	; 86
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	88 23       	and	r24, r24
    2100:	dc f7       	brge	.-10     	; 0x20f8 <M_TWI_u8_ReadByte+0x1c>
	{
		*TWI_DATA = TWDR_REG;
	}
*/

	*TWI_DATA = TWDR_REG;
    2102:	e3 e2       	ldi	r30, 0x23	; 35
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	ea 81       	ldd	r30, Y+2	; 0x02
    210a:	fb 81       	ldd	r31, Y+3	; 0x03
    210c:	80 83       	st	Z, r24

	return  local_error ;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <M_TWI_SLAVE_ADDRESS_LISTEN>:

u8 M_TWI_SLAVE_ADDRESS_LISTEN(void) {
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <M_TWI_SLAVE_ADDRESS_LISTEN+0x6>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(TWCR_REG, TWCR_TWINT) == 0);
    2126:	e6 e5       	ldi	r30, 0x56	; 86
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	88 23       	and	r24, r24
    212e:	dc f7       	brge	.-10     	; 0x2126 <M_TWI_SLAVE_ADDRESS_LISTEN+0xa>
    u8 status = TWSR_REG & 0xF8;
    2130:	e1 e2       	ldi	r30, 0x21	; 33
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	88 7f       	andi	r24, 0xF8	; 248
    2138:	89 83       	std	Y+1, r24	; 0x01

    if (status == 0x60 || status == 0x68) {  // SLA+W received
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	80 36       	cpi	r24, 0x60	; 96
    213e:	19 f0       	breq	.+6      	; 0x2146 <M_TWI_SLAVE_ADDRESS_LISTEN+0x2a>
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	88 36       	cpi	r24, 0x68	; 104
    2144:	31 f4       	brne	.+12     	; 0x2152 <M_TWI_SLAVE_ADDRESS_LISTEN+0x36>
        TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEA) | (1 << TWCR_TWEN);
    2146:	e6 e5       	ldi	r30, 0x56	; 86
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	84 ec       	ldi	r24, 0xC4	; 196
    214c:	80 83       	st	Z, r24
        return 0;
    214e:	1a 82       	std	Y+2, r1	; 0x02
    2150:	13 c0       	rjmp	.+38     	; 0x2178 <M_TWI_SLAVE_ADDRESS_LISTEN+0x5c>
    } else if (status == 0xA8 || status == 0xB0) {  // SLA+R received
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	88 3a       	cpi	r24, 0xA8	; 168
    2156:	19 f0       	breq	.+6      	; 0x215e <M_TWI_SLAVE_ADDRESS_LISTEN+0x42>
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	80 3b       	cpi	r24, 0xB0	; 176
    215c:	39 f4       	brne	.+14     	; 0x216c <M_TWI_SLAVE_ADDRESS_LISTEN+0x50>
        TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEA) | (1 << TWCR_TWEN);
    215e:	e6 e5       	ldi	r30, 0x56	; 86
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	84 ec       	ldi	r24, 0xC4	; 196
    2164:	80 83       	st	Z, r24
        return 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <M_TWI_SLAVE_ADDRESS_LISTEN+0x5c>
    } else {
        TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEA) | (1 << TWCR_TWEN);
    216c:	e6 e5       	ldi	r30, 0x56	; 86
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	84 ec       	ldi	r24, 0xC4	; 196
    2172:	80 83       	st	Z, r24
        return 2;
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	8a 83       	std	Y+2, r24	; 0x02
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <M_TWI_SLAVE_BYTE_LISTEN>:

u8 M_TWI_SLAVE_BYTE_LISTEN(void){
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
	// WAIT TO GET ADDRESSED
	while(GET_BIT(TWCR_REG, TWCR_TWINT) == 0);
    218c:	e6 e5       	ldi	r30, 0x56	; 86
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	88 23       	and	r24, r24
    2194:	dc f7       	brge	.-10     	; 0x218c <M_TWI_SLAVE_BYTE_LISTEN+0x8>
	return 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <main>:
#endif

// ___________MASTER_CODE___________

int main()
{
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	cb 54       	subi	r28, 0x4B	; 75
    21ac:	d0 40       	sbci	r29, 0x00	; 0
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
	u16 data = 0;
    21b8:	fe 01       	movw	r30, r28
    21ba:	e6 5b       	subi	r30, 0xB6	; 182
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	11 82       	std	Z+1, r1	; 0x01
    21c0:	10 82       	st	Z, r1
	u8 data_high;
	u8 data_low;
//	u8 address = 0;
//	u8 old_data;
	M_TWI_void_Init();
    21c2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <M_TWI_void_Init>
	LCD_voidInit();
    21c6:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_voidInit>

	ADC_voidInit();
    21ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	ADC_voidChannelSellect(CHANNEL_1);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 c0 05 	call	0xb80	; 0xb80 <ADC_voidChannelSellect>

	DIO_voidSetPinDirection(PORTA_ID, PIN1, PIN_INPUT);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	0e 94 59 07 	call	0xeb2	; 0xeb2 <DIO_voidSetPinDirection>
//	DIO_voidSetPinDirection(PORTC_ID, PIN0, PIN_OUTPUT);

	GIE_Enable();
    21de:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <GIE_Enable>
	while(1)
	{
		ADC_StartConversionBoling(&data);
    21e2:	ce 01       	movw	r24, r28
    21e4:	86 5b       	subi	r24, 0xB6	; 182
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	0e 94 de 05 	call	0xbbc	; 0xbbc <ADC_StartConversionBoling>
		LCD_voidClear();
    21ec:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_voidClear>
		LCD_voidGoToXY(0,0);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_voidGoToXY>
		LCD_voidWriteNumber(data);
    21f8:	fe 01       	movw	r30, r28
    21fa:	e6 5b       	subi	r30, 0xB6	; 182
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
    2200:	91 81       	ldd	r25, Z+1	; 0x01
    2202:	cc 01       	movw	r24, r24
    2204:	a0 e0       	ldi	r26, 0x00	; 0
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <LCD_voidWriteNumber>
		data_high = (data >> 8) & 0xFF;  // Extract upper 8 bits
    2210:	fe 01       	movw	r30, r28
    2212:	e6 5b       	subi	r30, 0xB6	; 182
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	89 2f       	mov	r24, r25
    221c:	99 27       	eor	r25, r25
    221e:	fe 01       	movw	r30, r28
    2220:	e7 5b       	subi	r30, 0xB7	; 183
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 83       	st	Z, r24
		data_low  = data & 0xFF;
    2226:	fe 01       	movw	r30, r28
    2228:	e6 5b       	subi	r30, 0xB6	; 182
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	fe 01       	movw	r30, r28
    2232:	e8 5b       	subi	r30, 0xB8	; 184
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 83       	st	Z, r24

		TWI_ERROR_STATUS error;

		if ((error = M_TWI_u8_StartCondition()) != NO_ERROR) {
    2238:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <M_TWI_u8_StartCondition>
    223c:	fe 01       	movw	r30, r28
    223e:	e9 5b       	subi	r30, 0xB9	; 185
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 83       	st	Z, r24
    2244:	fe 01       	movw	r30, r28
    2246:	e9 5b       	subi	r30, 0xB9	; 185
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	81 30       	cpi	r24, 0x01	; 1
    224e:	29 f0       	breq	.+10     	; 0x225a <main+0xbc>
		    LCD_voidWriteString((u8 *)"StartErr");
    2250:	80 e6       	ldi	r24, 0x60	; 96
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_voidWriteString>
    2258:	17 c2       	rjmp	.+1070   	; 0x2688 <main+0x4ea>
		    goto stop;
    225a:	fe 01       	movw	r30, r28
    225c:	ed 5b       	subi	r30, 0xBD	; 189
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	80 83       	st	Z, r24
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	a2 83       	std	Z+2, r26	; 0x02
    226e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	8e 01       	movw	r16, r28
    2272:	01 5c       	subi	r16, 0xC1	; 193
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	ed 5b       	subi	r30, 0xBD	; 189
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	4a ef       	ldi	r20, 0xFA	; 250
    228a:	54 e4       	ldi	r21, 0x44	; 68
    228c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	f8 01       	movw	r30, r16
    2296:	80 83       	st	Z, r24
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	a2 83       	std	Z+2, r26	; 0x02
    229c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    229e:	fe 01       	movw	r30, r28
    22a0:	ff 96       	adiw	r30, 0x3f	; 63
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e8       	ldi	r20, 0x80	; 128
    22b0:	5f e3       	ldi	r21, 0x3F	; 63
    22b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b6:	88 23       	and	r24, r24
    22b8:	2c f4       	brge	.+10     	; 0x22c4 <main+0x126>
		__ticks = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9e af       	std	Y+62, r25	; 0x3e
    22c0:	8d af       	std	Y+61, r24	; 0x3d
    22c2:	46 c0       	rjmp	.+140    	; 0x2350 <main+0x1b2>
	else if (__tmp > 65535)
    22c4:	fe 01       	movw	r30, r28
    22c6:	ff 96       	adiw	r30, 0x3f	; 63
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	3f ef       	ldi	r19, 0xFF	; 255
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	57 e4       	ldi	r21, 0x47	; 71
    22d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	64 f5       	brge	.+88     	; 0x2338 <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e0:	fe 01       	movw	r30, r28
    22e2:	ed 5b       	subi	r30, 0xBD	; 189
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e af       	std	Y+62, r25	; 0x3e
    230c:	8d af       	std	Y+61, r24	; 0x3d
    230e:	0f c0       	rjmp	.+30     	; 0x232e <main+0x190>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9c af       	std	Y+60, r25	; 0x3c
    2316:	8b af       	std	Y+59, r24	; 0x3b
    2318:	8b ad       	ldd	r24, Y+59	; 0x3b
    231a:	9c ad       	ldd	r25, Y+60	; 0x3c
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <main+0x17e>
    2320:	9c af       	std	Y+60, r25	; 0x3c
    2322:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8d ad       	ldd	r24, Y+61	; 0x3d
    2326:	9e ad       	ldd	r25, Y+62	; 0x3e
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9e af       	std	Y+62, r25	; 0x3e
    232c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2330:	9e ad       	ldd	r25, Y+62	; 0x3e
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <main+0x172>
    2336:	16 c0       	rjmp	.+44     	; 0x2364 <main+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	fe 01       	movw	r30, r28
    233a:	ff 96       	adiw	r30, 0x3f	; 63
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9e af       	std	Y+62, r25	; 0x3e
    234e:	8d af       	std	Y+61, r24	; 0x3d
    2350:	8d ad       	ldd	r24, Y+61	; 0x3d
    2352:	9e ad       	ldd	r25, Y+62	; 0x3e
    2354:	9a af       	std	Y+58, r25	; 0x3a
    2356:	89 af       	std	Y+57, r24	; 0x39
    2358:	89 ad       	ldd	r24, Y+57	; 0x39
    235a:	9a ad       	ldd	r25, Y+58	; 0x3a
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <main+0x1be>
    2360:	9a af       	std	Y+58, r25	; 0x3a
    2362:	89 af       	std	Y+57, r24	; 0x39
		}
		_delay_ms(1);
		if ((error = M_TWI_u8_SendSlaveAddressWrite(1)) != NO_ERROR) {
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <M_TWI_u8_SendSlaveAddressWrite>
    236a:	fe 01       	movw	r30, r28
    236c:	e9 5b       	subi	r30, 0xB9	; 185
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 83       	st	Z, r24
    2372:	fe 01       	movw	r30, r28
    2374:	e9 5b       	subi	r30, 0xB9	; 185
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	80 81       	ld	r24, Z
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	29 f0       	breq	.+10     	; 0x2388 <main+0x1ea>
		    LCD_voidWriteString((u8 *)"AddrErr");
    237e:	89 e6       	ldi	r24, 0x69	; 105
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_voidWriteString>
    2386:	80 c1       	rjmp	.+768    	; 0x2688 <main+0x4ea>
		    goto stop;
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a0 e8       	ldi	r26, 0x80	; 128
    238e:	bf e3       	ldi	r27, 0x3F	; 63
    2390:	8d ab       	std	Y+53, r24	; 0x35
    2392:	9e ab       	std	Y+54, r25	; 0x36
    2394:	af ab       	std	Y+55, r26	; 0x37
    2396:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6d a9       	ldd	r22, Y+53	; 0x35
    239a:	7e a9       	ldd	r23, Y+54	; 0x36
    239c:	8f a9       	ldd	r24, Y+55	; 0x37
    239e:	98 ad       	ldd	r25, Y+56	; 0x38
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a ef       	ldi	r20, 0xFA	; 250
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	89 ab       	std	Y+49, r24	; 0x31
    23b2:	9a ab       	std	Y+50, r25	; 0x32
    23b4:	ab ab       	std	Y+51, r26	; 0x33
    23b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23b8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ba:	7a a9       	ldd	r23, Y+50	; 0x32
    23bc:	8b a9       	ldd	r24, Y+51	; 0x33
    23be:	9c a9       	ldd	r25, Y+52	; 0x34
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <main+0x23c>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	98 ab       	std	Y+48, r25	; 0x30
    23d6:	8f a7       	std	Y+47, r24	; 0x2f
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <main+0x2ba>
	else if (__tmp > 65535)
    23da:	69 a9       	ldd	r22, Y+49	; 0x31
    23dc:	7a a9       	ldd	r23, Y+50	; 0x32
    23de:	8b a9       	ldd	r24, Y+51	; 0x33
    23e0:	9c a9       	ldd	r25, Y+52	; 0x34
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6d a9       	ldd	r22, Y+53	; 0x35
    23f4:	7e a9       	ldd	r23, Y+54	; 0x36
    23f6:	8f a9       	ldd	r24, Y+55	; 0x37
    23f8:	98 ad       	ldd	r25, Y+56	; 0x38
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	0f c0       	rjmp	.+30     	; 0x243a <main+0x29c>
    241c:	88 ec       	ldi	r24, 0xC8	; 200
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9e a7       	std	Y+46, r25	; 0x2e
    2422:	8d a7       	std	Y+45, r24	; 0x2d
    2424:	8d a5       	ldd	r24, Y+45	; 0x2d
    2426:	9e a5       	ldd	r25, Y+46	; 0x2e
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <main+0x28a>
    242c:	9e a7       	std	Y+46, r25	; 0x2e
    242e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	98 ab       	std	Y+48, r25	; 0x30
    2438:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <main+0x27e>
    2442:	14 c0       	rjmp	.+40     	; 0x246c <main+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	69 a9       	ldd	r22, Y+49	; 0x31
    2446:	7a a9       	ldd	r23, Y+50	; 0x32
    2448:	8b a9       	ldd	r24, Y+51	; 0x33
    244a:	9c a9       	ldd	r25, Y+52	; 0x34
    244c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	98 ab       	std	Y+48, r25	; 0x30
    2456:	8f a7       	std	Y+47, r24	; 0x2f
    2458:	8f a5       	ldd	r24, Y+47	; 0x2f
    245a:	98 a9       	ldd	r25, Y+48	; 0x30
    245c:	9c a7       	std	Y+44, r25	; 0x2c
    245e:	8b a7       	std	Y+43, r24	; 0x2b
    2460:	8b a5       	ldd	r24, Y+43	; 0x2b
    2462:	9c a5       	ldd	r25, Y+44	; 0x2c
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <main+0x2c6>
    2468:	9c a7       	std	Y+44, r25	; 0x2c
    246a:	8b a7       	std	Y+43, r24	; 0x2b
		}
		_delay_ms(1);
		if ((error = M_TWI_u8_SendByte(data_high)) != NO_ERROR) {
    246c:	fe 01       	movw	r30, r28
    246e:	e7 5b       	subi	r30, 0xB7	; 183
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	0e 94 44 10 	call	0x2088	; 0x2088 <M_TWI_u8_SendByte>
    2478:	fe 01       	movw	r30, r28
    247a:	e9 5b       	subi	r30, 0xB9	; 185
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 83       	st	Z, r24
    2480:	fe 01       	movw	r30, r28
    2482:	e9 5b       	subi	r30, 0xB9	; 185
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	29 f0       	breq	.+10     	; 0x2496 <main+0x2f8>
		    LCD_voidWriteString((u8 *)"HighErr");
    248c:	81 e7       	ldi	r24, 0x71	; 113
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_voidWriteString>
    2494:	f9 c0       	rjmp	.+498    	; 0x2688 <main+0x4ea>
		    goto stop;
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	8f a3       	std	Y+39, r24	; 0x27
    24a0:	98 a7       	std	Y+40, r25	; 0x28
    24a2:	a9 a7       	std	Y+41, r26	; 0x29
    24a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6f a1       	ldd	r22, Y+39	; 0x27
    24a8:	78 a5       	ldd	r23, Y+40	; 0x28
    24aa:	89 a5       	ldd	r24, Y+41	; 0x29
    24ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a ef       	ldi	r20, 0xFA	; 250
    24b4:	54 e4       	ldi	r21, 0x44	; 68
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8b a3       	std	Y+35, r24	; 0x23
    24c0:	9c a3       	std	Y+36, r25	; 0x24
    24c2:	ad a3       	std	Y+37, r26	; 0x25
    24c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c6:	6b a1       	ldd	r22, Y+35	; 0x23
    24c8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ca:	8d a1       	ldd	r24, Y+37	; 0x25
    24cc:	9e a1       	ldd	r25, Y+38	; 0x26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <main+0x34a>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9a a3       	std	Y+34, r25	; 0x22
    24e4:	89 a3       	std	Y+33, r24	; 0x21
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <main+0x3c8>
	else if (__tmp > 65535)
    24e8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ea:	7c a1       	ldd	r23, Y+36	; 0x24
    24ec:	8d a1       	ldd	r24, Y+37	; 0x25
    24ee:	9e a1       	ldd	r25, Y+38	; 0x26
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <main+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6f a1       	ldd	r22, Y+39	; 0x27
    2502:	78 a5       	ldd	r23, Y+40	; 0x28
    2504:	89 a5       	ldd	r24, Y+41	; 0x29
    2506:	9a a5       	ldd	r25, Y+42	; 0x2a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	89 a3       	std	Y+33, r24	; 0x21
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <main+0x3aa>
    252a:	88 ec       	ldi	r24, 0xC8	; 200
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	98 a3       	std	Y+32, r25	; 0x20
    2530:	8f 8f       	std	Y+31, r24	; 0x1f
    2532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2534:	98 a1       	ldd	r25, Y+32	; 0x20
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x398>
    253a:	98 a3       	std	Y+32, r25	; 0x20
    253c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	89 a1       	ldd	r24, Y+33	; 0x21
    2540:	9a a1       	ldd	r25, Y+34	; 0x22
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <main+0x38c>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <main+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	9e 8f       	std	Y+30, r25	; 0x1e
    256c:	8d 8f       	std	Y+29, r24	; 0x1d
    256e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2570:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <main+0x3d4>
    2576:	9e 8f       	std	Y+30, r25	; 0x1e
    2578:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		_delay_ms(1);
		if ((error = M_TWI_u8_SendByte(data_low)) != NO_ERROR) {
    257a:	fe 01       	movw	r30, r28
    257c:	e8 5b       	subi	r30, 0xB8	; 184
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	0e 94 44 10 	call	0x2088	; 0x2088 <M_TWI_u8_SendByte>
    2586:	fe 01       	movw	r30, r28
    2588:	e9 5b       	subi	r30, 0xB9	; 185
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 83       	st	Z, r24
    258e:	fe 01       	movw	r30, r28
    2590:	e9 5b       	subi	r30, 0xB9	; 185
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	29 f0       	breq	.+10     	; 0x25a4 <main+0x406>
		    LCD_voidWriteString((u8 *)"LowErr");
    259a:	89 e7       	ldi	r24, 0x79	; 121
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_voidWriteString>
    25a2:	72 c0       	rjmp	.+228    	; 0x2688 <main+0x4ea>
		    goto stop;
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	a0 e8       	ldi	r26, 0x80	; 128
    25aa:	bf e3       	ldi	r27, 0x3F	; 63
    25ac:	89 8f       	std	Y+25, r24	; 0x19
    25ae:	9a 8f       	std	Y+26, r25	; 0x1a
    25b0:	ab 8f       	std	Y+27, r26	; 0x1b
    25b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b4:	69 8d       	ldd	r22, Y+25	; 0x19
    25b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4a ef       	ldi	r20, 0xFA	; 250
    25c2:	54 e4       	ldi	r21, 0x44	; 68
    25c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8d 8b       	std	Y+21, r24	; 0x15
    25ce:	9e 8b       	std	Y+22, r25	; 0x16
    25d0:	af 8b       	std	Y+23, r26	; 0x17
    25d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	2c f4       	brge	.+10     	; 0x25f6 <main+0x458>
		__ticks = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	3f c0       	rjmp	.+126    	; 0x2674 <main+0x4d6>
	else if (__tmp > 65535)
    25f6:	6d 89       	ldd	r22, Y+21	; 0x15
    25f8:	7e 89       	ldd	r23, Y+22	; 0x16
    25fa:	8f 89       	ldd	r24, Y+23	; 0x17
    25fc:	98 8d       	ldd	r25, Y+24	; 0x18
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	3f ef       	ldi	r19, 0xFF	; 255
    2602:	4f e7       	ldi	r20, 0x7F	; 127
    2604:	57 e4       	ldi	r21, 0x47	; 71
    2606:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    260a:	18 16       	cp	r1, r24
    260c:	4c f5       	brge	.+82     	; 0x2660 <main+0x4c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e2       	ldi	r20, 0x20	; 32
    261c:	51 e4       	ldi	r21, 0x41	; 65
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
    2636:	0f c0       	rjmp	.+30     	; 0x2656 <main+0x4b8>
    2638:	88 ec       	ldi	r24, 0xC8	; 200
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	9a 8b       	std	Y+18, r25	; 0x12
    263e:	89 8b       	std	Y+17, r24	; 0x11
    2640:	89 89       	ldd	r24, Y+17	; 0x11
    2642:	9a 89       	ldd	r25, Y+18	; 0x12
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <main+0x4a6>
    2648:	9a 8b       	std	Y+18, r25	; 0x12
    264a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264c:	8b 89       	ldd	r24, Y+19	; 0x13
    264e:	9c 89       	ldd	r25, Y+20	; 0x14
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2656:	8b 89       	ldd	r24, Y+19	; 0x13
    2658:	9c 89       	ldd	r25, Y+20	; 0x14
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	69 f7       	brne	.-38     	; 0x2638 <main+0x49a>
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <main+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2660:	6d 89       	ldd	r22, Y+21	; 0x15
    2662:	7e 89       	ldd	r23, Y+22	; 0x16
    2664:	8f 89       	ldd	r24, Y+23	; 0x17
    2666:	98 8d       	ldd	r25, Y+24	; 0x18
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9c 8b       	std	Y+20, r25	; 0x14
    2672:	8b 8b       	std	Y+19, r24	; 0x13
    2674:	8b 89       	ldd	r24, Y+19	; 0x13
    2676:	9c 89       	ldd	r25, Y+20	; 0x14
    2678:	98 8b       	std	Y+16, r25	; 0x10
    267a:	8f 87       	std	Y+15, r24	; 0x0f
    267c:	8f 85       	ldd	r24, Y+15	; 0x0f
    267e:	98 89       	ldd	r25, Y+16	; 0x10
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	f1 f7       	brne	.-4      	; 0x2680 <main+0x4e2>
    2684:	98 8b       	std	Y+16, r25	; 0x10
    2686:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(1);
		stop:
		M_TWI_void_StopCondition();
    2688:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <M_TWI_void_StopCondition>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a8 ec       	ldi	r26, 0xC8	; 200
    2692:	b2 e4       	ldi	r27, 0x42	; 66
    2694:	8b 87       	std	Y+11, r24	; 0x0b
    2696:	9c 87       	std	Y+12, r25	; 0x0c
    2698:	ad 87       	std	Y+13, r26	; 0x0d
    269a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6b 85       	ldd	r22, Y+11	; 0x0b
    269e:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a ef       	ldi	r20, 0xFA	; 250
    26aa:	54 e4       	ldi	r21, 0x44	; 68
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8f 83       	std	Y+7, r24	; 0x07
    26b6:	98 87       	std	Y+8, r25	; 0x08
    26b8:	a9 87       	std	Y+9, r26	; 0x09
    26ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <main+0x540>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <main+0x5be>
	else if (__tmp > 65535)
    26de:	6f 81       	ldd	r22, Y+7	; 0x07
    26e0:	78 85       	ldd	r23, Y+8	; 0x08
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <main+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	0f c0       	rjmp	.+30     	; 0x273e <main+0x5a0>
    2720:	88 ec       	ldi	r24, 0xC8	; 200
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9c 83       	std	Y+4, r25	; 0x04
    2726:	8b 83       	std	Y+3, r24	; 0x03
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	9c 81       	ldd	r25, Y+4	; 0x04
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <main+0x58e>
    2730:	9c 83       	std	Y+4, r25	; 0x04
    2732:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <main+0x582>
    2746:	4d cd       	rjmp	.-1382   	; 0x21e2 <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6f 81       	ldd	r22, Y+7	; 0x07
    274a:	78 85       	ldd	r23, Y+8	; 0x08
    274c:	89 85       	ldd	r24, Y+9	; 0x09
    274e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <main+0x5ca>
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
    2770:	38 cd       	rjmp	.-1424   	; 0x21e2 <main+0x44>

00002772 <__mulsi3>:
    2772:	62 9f       	mul	r22, r18
    2774:	d0 01       	movw	r26, r0
    2776:	73 9f       	mul	r23, r19
    2778:	f0 01       	movw	r30, r0
    277a:	82 9f       	mul	r24, r18
    277c:	e0 0d       	add	r30, r0
    277e:	f1 1d       	adc	r31, r1
    2780:	64 9f       	mul	r22, r20
    2782:	e0 0d       	add	r30, r0
    2784:	f1 1d       	adc	r31, r1
    2786:	92 9f       	mul	r25, r18
    2788:	f0 0d       	add	r31, r0
    278a:	83 9f       	mul	r24, r19
    278c:	f0 0d       	add	r31, r0
    278e:	74 9f       	mul	r23, r20
    2790:	f0 0d       	add	r31, r0
    2792:	65 9f       	mul	r22, r21
    2794:	f0 0d       	add	r31, r0
    2796:	99 27       	eor	r25, r25
    2798:	72 9f       	mul	r23, r18
    279a:	b0 0d       	add	r27, r0
    279c:	e1 1d       	adc	r30, r1
    279e:	f9 1f       	adc	r31, r25
    27a0:	63 9f       	mul	r22, r19
    27a2:	b0 0d       	add	r27, r0
    27a4:	e1 1d       	adc	r30, r1
    27a6:	f9 1f       	adc	r31, r25
    27a8:	bd 01       	movw	r22, r26
    27aa:	cf 01       	movw	r24, r30
    27ac:	11 24       	eor	r1, r1
    27ae:	08 95       	ret

000027b0 <__udivmodsi4>:
    27b0:	a1 e2       	ldi	r26, 0x21	; 33
    27b2:	1a 2e       	mov	r1, r26
    27b4:	aa 1b       	sub	r26, r26
    27b6:	bb 1b       	sub	r27, r27
    27b8:	fd 01       	movw	r30, r26
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <__udivmodsi4_ep>

000027bc <__udivmodsi4_loop>:
    27bc:	aa 1f       	adc	r26, r26
    27be:	bb 1f       	adc	r27, r27
    27c0:	ee 1f       	adc	r30, r30
    27c2:	ff 1f       	adc	r31, r31
    27c4:	a2 17       	cp	r26, r18
    27c6:	b3 07       	cpc	r27, r19
    27c8:	e4 07       	cpc	r30, r20
    27ca:	f5 07       	cpc	r31, r21
    27cc:	20 f0       	brcs	.+8      	; 0x27d6 <__udivmodsi4_ep>
    27ce:	a2 1b       	sub	r26, r18
    27d0:	b3 0b       	sbc	r27, r19
    27d2:	e4 0b       	sbc	r30, r20
    27d4:	f5 0b       	sbc	r31, r21

000027d6 <__udivmodsi4_ep>:
    27d6:	66 1f       	adc	r22, r22
    27d8:	77 1f       	adc	r23, r23
    27da:	88 1f       	adc	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	1a 94       	dec	r1
    27e0:	69 f7       	brne	.-38     	; 0x27bc <__udivmodsi4_loop>
    27e2:	60 95       	com	r22
    27e4:	70 95       	com	r23
    27e6:	80 95       	com	r24
    27e8:	90 95       	com	r25
    27ea:	9b 01       	movw	r18, r22
    27ec:	ac 01       	movw	r20, r24
    27ee:	bd 01       	movw	r22, r26
    27f0:	cf 01       	movw	r24, r30
    27f2:	08 95       	ret

000027f4 <__prologue_saves__>:
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	4f 92       	push	r4
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	ca 1b       	sub	r28, r26
    281e:	db 0b       	sbc	r29, r27
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	09 94       	ijmp

0000282c <__epilogue_restores__>:
    282c:	2a 88       	ldd	r2, Y+18	; 0x12
    282e:	39 88       	ldd	r3, Y+17	; 0x11
    2830:	48 88       	ldd	r4, Y+16	; 0x10
    2832:	5f 84       	ldd	r5, Y+15	; 0x0f
    2834:	6e 84       	ldd	r6, Y+14	; 0x0e
    2836:	7d 84       	ldd	r7, Y+13	; 0x0d
    2838:	8c 84       	ldd	r8, Y+12	; 0x0c
    283a:	9b 84       	ldd	r9, Y+11	; 0x0b
    283c:	aa 84       	ldd	r10, Y+10	; 0x0a
    283e:	b9 84       	ldd	r11, Y+9	; 0x09
    2840:	c8 84       	ldd	r12, Y+8	; 0x08
    2842:	df 80       	ldd	r13, Y+7	; 0x07
    2844:	ee 80       	ldd	r14, Y+6	; 0x06
    2846:	fd 80       	ldd	r15, Y+5	; 0x05
    2848:	0c 81       	ldd	r16, Y+4	; 0x04
    284a:	1b 81       	ldd	r17, Y+3	; 0x03
    284c:	aa 81       	ldd	r26, Y+2	; 0x02
    284e:	b9 81       	ldd	r27, Y+1	; 0x01
    2850:	ce 0f       	add	r28, r30
    2852:	d1 1d       	adc	r29, r1
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	ed 01       	movw	r28, r26
    2860:	08 95       	ret

00002862 <_exit>:
    2862:	f8 94       	cli

00002864 <__stop_program>:
    2864:	ff cf       	rjmp	.-2      	; 0x2864 <__stop_program>
